{
  "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositContractAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "addToDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getDistributableShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "renderTokenById",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rugpull",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendToOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "withdrawal_credentials",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "deposit_data_root",
          "type": "bytes32"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0f96efd06b4d3c97a0264d9e3cedb21fa65f034c80876ea7fe75f3f0caa319c1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
    "transactionIndex": 0,
    "gasUsed": "2825503",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000400000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000020000000000000000000000",
    "blockHash": "0x304e4083d6a09ae974b242b613e13f623266f476c2f49d4a080e1218c01537c1",
    "transactionHash": "0x0f96efd06b4d3c97a0264d9e3cedb21fa65f034c80876ea7fe75f3f0caa319c1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21,
        "transactionHash": "0x0f96efd06b4d3c97a0264d9e3cedb21fa65f034c80876ea7fe75f3f0caa319c1",
        "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x304e4083d6a09ae974b242b613e13f623266f476c2f49d4a080e1218c01537c1"
      }
    ],
    "blockNumber": 21,
    "cumulativeGasUsed": "2825503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000219ab540356cBB839Cbe05303d7705Fa",
    "0x521B2cE927FD6d0D473789Bd3c70B296BBce613e"
  ],
  "solcInputHash": "1f73cd44aa60b1bd7d5402118e7c3bef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositContractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDistributableShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"renderTokenById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rugpull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport 'base64-sol/base64.sol';\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n}\\n\\n\\ncontract StakingPool is ERC721Enumerable, Ownable {\\n\\n    using Strings for uint256;\\n\\n  event Deposit(address depositContractAddress, address caller);\\n\\n  mapping (uint => uint) public depositAmount;\\n  uint public totalDeposits;\\n  uint private _tokenId;\\n\\n  enum State { acceptingDeposits, staked, exited }\\n  State currentState;\\n\\n  address public depositContractAddress;\\n  IDepositContract depositContract;\\n\\n  address private rightfulOwner;\\n/*\\n  modifier onlyOwner() {\\n   require(address(msg.sender) == owner, \\\"Not owner\\\");\\n   _;\\n  }\\n*/\\n  constructor(address depositContractAddress_, address owner_) ERC721(\\\"staking con amigos\\\", \\\"FRENS\\\") {\\n    currentState = State.acceptingDeposits;\\n    depositContractAddress = depositContractAddress_;\\n    depositContract = IDepositContract(depositContractAddress);\\n    rightfulOwner = owner_;\\n  }\\n\\n  function getOwner() public view returns(address){\\n    return rightfulOwner;\\n  }\\n\\n  function sendToOwner() public {\\n    require(owner() != rightfulOwner, \\\"already done\\\");\\n    _transferOwnership(rightfulOwner);\\n  }\\n\\n  function deposit(address userAddress) public payable {\\n    require(currentState == State.acceptingDeposits);\\n    _tokenId++;\\n    uint256 id = _tokenId;\\n    depositAmount[id] = msg.value;\\n    totalDeposits += msg.value;\\n    _mint(userAddress, id);\\n  }\\n\\n  function addToDeposit(uint _id) public payable {\\n    require(_exists(_id), \\\"not exist\\\");\\n    require(currentState == State.acceptingDeposits);\\n    depositAmount[_id] += msg.value;\\n    totalDeposits += msg.value;\\n  }\\n\\n  function withdraw(uint _id, uint _amount) public {\\n    require(currentState != State.staked, \\\"cannot withdraw once staked\\\");\\n    require(msg.sender == ownerOf(_id), \\\"not the owner\\\");\\n    require(depositAmount[_id] >= _amount, \\\"not enough deposited\\\");\\n    depositAmount[_id] -= _amount;\\n    totalDeposits -= _amount;\\n    payable(msg.sender).transfer(_amount);\\n  }\\n\\n  function distribute() public {\\n    require(currentState == State.staked, \\\"use withdraw when not staked\\\");\\n    uint contractBalance = address(this).balance;\\n    for(uint i=1; i<=totalSupply(); i++) {\\n      address tokenOwner = ownerOf(i);\\n      uint share = _getShare(i, contractBalance);\\n      payable(tokenOwner).transfer(share);\\n    }\\n  }\\n\\n  function _getShare(uint _id, uint _contractBalance) internal view returns(uint) {\\n    return _contractBalance * depositAmount[_id] / totalDeposits - 1; //steal 1 wei\\n  }\\n\\n  function getShare(uint _id) public view returns(uint) {\\n    uint contractBalance = address(this).balance;\\n    return _getShare(_id, contractBalance);\\n  }\\n\\n  function getDistributableShare(uint _id) public view returns(uint) {\\n    if(currentState == State.acceptingDeposits) {\\n      return 0;\\n    } else {\\n      return getShare(_id);\\n    }\\n\\n  }\\n\\n\\n  function stake(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) public onlyOwner{\\n    require(address(this).balance >= 32, \\\"not enough eth\\\");\\n    currentState = State.staked;\\n    uint value = 32 ether;\\n    depositContract.deposit{value: value}(pubkey, withdrawal_credentials, signature, deposit_data_root);\\n\\n    emit Deposit(depositContractAddress, msg.sender);\\n  }\\n\\n  function rugpull() public {\\n    payable(msg.sender).transfer(address(this).balance);\\n  }\\n\\n  function unstake() public {\\n    currentState = State.exited;\\n  }\\n\\n\\n  //art stuff\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n    require(_exists(id), \\\"not exist\\\");\\n    string memory name = string(abi.encodePacked('fren share #',id.toString()));\\n    string memory description = string(abi.encodePacked('this fren share has a deposit of ',uint2str(depositAmount[id]),' with claimable balance of ',uint2str(getDistributableShare(id))));\\n    string memory image = Base64.encode(bytes(generateSVGofTokenById(id)));\\n\\n          return\\n              string(\\n                  abi.encodePacked(\\n                    'data:application/json;base64,',\\n                    Base64.encode(\\n                        bytes(\\n                              abi.encodePacked(\\n                                  '{\\\"name\\\":\\\"',\\n                                  name,\\n                                  '\\\", \\\"description\\\":\\\"',\\n                                  description,\\n                                  '\\\", \\\"external_url\\\":\\\"https://stakeconamigos.com/token/',\\n                                  id.toString(),\\n                                  '\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"deposit\\\", \\\"value\\\": \\\"E',\\n                                  uint2str(depositAmount[id]),\\n                                  '\\\"},{\\\"trait_type\\\": \\\"claimable\\\", \\\"value\\\": ',\\n                                  uint2str(getDistributableShare(id)),\\n                                  '}], \\\"image\\\": \\\"',\\n                                  'data:image/svg+xml;base64,',\\n                                  image,\\n                                  '\\\"}'\\n                              )\\n                            )\\n                        )\\n                  )\\n              );\\n      }\\n\\n      function generateSVGofTokenById(uint256 id) internal view returns (string memory) {\\n\\n        string memory svg = string(abi.encodePacked(\\n          '<svg width=\\\"400\\\" height=\\\"400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n            renderTokenById(id),\\n          '</svg>'\\n        ));\\n\\n        return svg;\\n      }\\n\\n      // Visibility is `public` to enable it being called by other contracts for composition.\\n      function renderTokenById(uint256 id) public view returns (string memory) {\\n\\n        string memory render = string(abi.encodePacked(\\n          '<g id=\\\"pic\\\">',\\n            '<ellipse stroke-width=\\\"3\\\" ry=\\\"195\\\" rx=\\\"195\\\" id=\\\"svg_2\\\" cy=\\\"200\\\" cx=\\\"200\\\" stroke=\\\"#000\\\" fill=\\\"grey\\\"/>'\\n            '<text font-size=\\\"40\\\" font-weight=\\\"bold\\\" x=\\\"120\\\" y=\\\"140\\\" fill=\\\"blue\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              'Deposit:',\\n            '</text>',\\n            '<text font-size=\\\"30\\\" font-weight=\\\"bold\\\" x=\\\"150\\\" y=\\\"175\\\" fill=\\\"blue\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              uint2str(depositAmount[id]), ' Eth',\\n            '</text>',\\n            '<text font-size=\\\"40\\\" font-weight=\\\"bold\\\" x=\\\"110\\\" y=\\\"240\\\" fill=\\\"green\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              'Claimable:'\\n            '</text>',\\n            '<text font-size=\\\"30\\\" font-weight=\\\"bold\\\" x=\\\"150\\\" y=\\\"275\\\" fill=\\\"green\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              uint2str(getDistributableShare(id)), ' Eth',\\n            '</text>',\\n          '</g>'\\n          ));\\n\\n        return render;\\n      }\\n\\n      function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n          if (_i == 0) {\\n              return \\\"0\\\";\\n          }\\n          uint j = _i;\\n          uint len;\\n          while (j != 0) {\\n              len++;\\n              j /= 10;\\n          }\\n          bytes memory bstr = new bytes(len);\\n          uint k = len;\\n          while (_i != 0) {\\n              k = k-1;\\n              uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n              bytes1 b1 = bytes1(temp);\\n              bstr[k] = b1;\\n              _i /= 10;\\n          }\\n          return string(bstr);\\n      }\\n\\n\\n  // to support receiving ETH by default\\n  receive() external payable {\\n    /*\\n    _tokenId++;\\n    uint256 id = _tokenId;\\n    depositAmount[id] = msg.value;\\n    _mint(msg.sender, id);\\n    */\\n  }\\n\\n  fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x49e8d66c660ed14f9513881938ec65502e87f9b61b65c3a9c08f21ee7a5e03fc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620032303803806200323083398101604081905262000034916200022b565b60408051808201825260128152717374616b696e6720636f6e20616d69676f7360701b6020808301918252835180850190945260058452644652454e5360d81b9084015281519192916200008b9160009162000168565b508051620000a190600190602084019062000168565b505050620000be620000b86200011260201b60201c565b62000116565b600e80546001600160a81b0319166101006001600160a01b0394851681029190911791829055600f80549190920484166001600160a01b03199182161790915560108054909116919092161790556200029f565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001769062000262565b90600052602060002090601f0160209004810192826200019a5760008555620001e5565b82601f10620001b557805160ff1916838001178555620001e5565b82800160010185558215620001e5579182015b82811115620001e5578251825591602001919060010190620001c8565b50620001f3929150620001f7565b5090565b5b80821115620001f35760008155600101620001f8565b80516001600160a01b03811681146200022657600080fd5b919050565b600080604083850312156200023e578182fd5b62000249836200020e565b915062000259602084016200020e565b90509250929050565b600181811c908216806200027757607f821691505b602082108114156200029957634e487b7160e01b600052602260045260246000fd5b50919050565b612f8180620002af6000396000f3fe6080604052600436106101e55760003560e01c8063715018a611610101578063a2d6c6da1161009a578063e2664e491161006c578063e2664e4914610591578063e4fc6b6d146105a6578063e985e9c5146105bb578063f2fde38b14610604578063f340fa011461062457005b8063a2d6c6da14610511578063b88d4fde14610531578063c87b56dd14610551578063cfb5a5f81461057157005b8063893d20e8116100d3578063893d20e8146104a05780638da5cb5b146104be57806395d89b41146104dc578063a22cb465146104f157005b8063715018a6146104355780637d8820971461044a5780638620891c1461046057806387f8ab261461047357005b80632f745c591161017e5780634f6ccce7116101505780634f6ccce7146103a05780636352211e146103c05780636620a935146103e0578063678e300a146103f557806370a082311461041557005b80632f745c591461032057806342842e0e14610340578063441a3e70146103605780634b2b4e361461038057005b806318160ddd116101b757806318160ddd1461029d57806323b872dd146102bc5780632a4dbd2b146102dc5780632def66201461030157005b806301ffc9a7146101ee57806306fdde0314610223578063081812fc14610245578063095ea7b31461027d57005b366101ec57005b005b3480156101fa57600080fd5b5061020e6102093660046123c2565b610637565b60405190151581526020015b60405180910390f35b34801561022f57600080fd5b50610238610662565b60405161021a9190612cab565b34801561025157600080fd5b50610265610260366004612499565b6106f4565b6040516001600160a01b03909116815260200161021a565b34801561028957600080fd5b506101ec610298366004612399565b61078e565b3480156102a957600080fd5b506008545b60405190815260200161021a565b3480156102c857600080fd5b506101ec6102d736600461224f565b6108a4565b3480156102e857600080fd5b50600e546102659061010090046001600160a01b031681565b34801561030d57600080fd5b506101ec600e805460ff19166002179055565b34801561032c57600080fd5b506102ae61033b366004612399565b6108d5565b34801561034c57600080fd5b506101ec61035b36600461224f565b61096b565b34801561036c57600080fd5b506101ec61037b3660046124b1565b610986565b34801561038c57600080fd5b506101ec61039b3660046123fa565b610b12565b3480156103ac57600080fd5b506102ae6103bb366004612499565b610c5e565b3480156103cc57600080fd5b506102656103db366004612499565b610cff565b3480156103ec57600080fd5b506101ec610d76565b34801561040157600080fd5b506102ae610410366004612499565b610df1565b34801561042157600080fd5b506102ae610430366004612203565b610e35565b34801561044157600080fd5b506101ec610ebc565b34801561045657600080fd5b506102ae600c5481565b6101ec61046e366004612499565b610ef0565b34801561047f57600080fd5b506102ae61048e366004612499565b600b6020526000908152604090205481565b3480156104ac57600080fd5b506010546001600160a01b0316610265565b3480156104ca57600080fd5b50600a546001600160a01b0316610265565b3480156104e857600080fd5b50610238610fb0565b3480156104fd57600080fd5b506101ec61050c36600461235f565b610fbf565b34801561051d57600080fd5b5061023861052c366004612499565b610fce565b34801561053d57600080fd5b506101ec61054c36600461228a565b611023565b34801561055d57600080fd5b5061023861056c366004612499565b61105b565b34801561057d57600080fd5b506102ae61058c366004612499565b6111bc565b34801561059d57600080fd5b506101ec6111d0565b3480156105b257600080fd5b506101ec6111ff565b3480156105c757600080fd5b5061020e6105d636600461221d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561061057600080fd5b506101ec61061f366004612203565b6112e8565b6101ec610632366004612203565b611380565b60006001600160e01b0319821663780e9d6360e01b148061065c575061065c826113ff565b92915050565b60606000805461067190612e49565b80601f016020809104026020016040519081016040528092919081815260200182805461069d90612e49565b80156106ea5780601f106106bf576101008083540402835291602001916106ea565b820191906000526020600020905b8154815290600101906020018083116106cd57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107725760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061079982610cff565b9050806001600160a01b0316836001600160a01b031614156108075760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610769565b336001600160a01b0382161480610823575061082381336105d6565b6108955760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610769565b61089f838361144f565b505050565b6108ae33826114bd565b6108ca5760405162461bcd60e51b815260040161076990612d45565b61089f8383836115b4565b60006108e083610e35565b82106109425760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610769565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61089f83838360405180602001604052806000815250611023565b6001600e5460ff1660028111156109ad57634e487b7160e01b600052602160045260246000fd5b14156109fb5760405162461bcd60e51b815260206004820152601b60248201527f63616e6e6f74207769746864726177206f6e6365207374616b656400000000006044820152606401610769565b610a0482610cff565b6001600160a01b0316336001600160a01b031614610a545760405162461bcd60e51b815260206004820152600d60248201526c3737ba103a34329037bbb732b960991b6044820152606401610769565b6000828152600b6020526040902054811115610aa95760405162461bcd60e51b81526020600482015260146024820152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606401610769565b6000828152600b602052604081208054839290610ac7908490612e06565b9250508190555080600c6000828254610ae09190612e06565b9091555050604051339082156108fc029083906000818181858888f1935050505015801561089f573d6000803e3d6000fd5b600a546001600160a01b03163314610b3c5760405162461bcd60e51b815260040161076990612d10565b6020471015610b7e5760405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606401610769565b600e805460ff19166001179055600f546040516304512a2360e31b81526801bc16d674ec800000916001600160a01b0316906322895118908390610bd2908c908c908c908c908c908c908c90600401612c5a565b6000604051808303818588803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b5050600e54604080516101009092046001600160a01b031682523360208301527f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a449450019150610c4c9050565b60405180910390a15050505050505050565b6000610c6960085490565b8210610ccc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610769565b60088281548110610ced57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b03168061065c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610769565b6010546001600160a01b0316610d94600a546001600160a01b031690565b6001600160a01b03161415610dda5760405162461bcd60e51b815260206004820152600c60248201526b616c726561647920646f6e6560a01b6044820152606401610769565b601054610def906001600160a01b031661175f565b565b600080600e5460ff166002811115610e1957634e487b7160e01b600052602160045260246000fd5b1415610e2757506000919050565b61065c826111bc565b919050565b60006001600160a01b038216610ea05760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610769565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610ee65760405162461bcd60e51b815260040161076990612d10565b610def600061175f565b6000818152600260205260409020546001600160a01b0316610f405760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152606401610769565b6000600e5460ff166002811115610f6757634e487b7160e01b600052602160045260246000fd5b14610f7157600080fd5b6000818152600b602052604081208054349290610f8f908490612d96565b9250508190555034600c6000828254610fa89190612d96565b909155505050565b60606001805461067190612e49565b610fca3383836117b1565b5050565b6000818152600b602052604081205460609190610fea90611880565b610ffb610ff685610df1565b611880565b60405160200161100c929190612892565b60408051601f198184030181529190529392505050565b61102d33836114bd565b6110495760405162461bcd60e51b815260040161076990612d45565b611055848484846119c5565b50505050565b6000818152600260205260409020546060906001600160a01b03166110ae5760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152606401610769565b60006110b9836119f8565b6040516020016110c99190612794565b60408051601f198184030181529181526000858152600b60205290812054919250906110f490611880565b611100610ff686610df1565b604051602001611111929190612709565b6040516020818303038152906040529050600061113561113086611b12565b611b2f565b90506111938383611145886119f8565b6000898152600b602052604090205461115d90611880565b611169610ff68b610df1565b8660405160200161117f96959493929190612543565b604051602081830303815290604052611b2f565b6040516020016111a391906127c8565b6040516020818303038152906040529350505050919050565b6000476111c98382611ca3565b9392505050565b60405133904780156108fc02916000818181858888f193505050501580156111fc573d6000803e3d6000fd5b50565b6001600e5460ff16600281111561122657634e487b7160e01b600052602160045260246000fd5b146112735760405162461bcd60e51b815260206004820152601c60248201527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606401610769565b4760015b6008548111610fca57600061128b82610cff565b905060006112998385611ca3565b6040519091506001600160a01b0383169082156108fc029083906000818181858888f193505050501580156112d2573d6000803e3d6000fd5b50505080806112e090612e84565b915050611277565b600a546001600160a01b031633146113125760405162461bcd60e51b815260040161076990612d10565b6001600160a01b0381166113775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610769565b6111fc8161175f565b6000600e5460ff1660028111156113a757634e487b7160e01b600052602160045260246000fd5b146113b157600080fd5b600d80549060006113c183612e84565b9091555050600d546000818152600b602052604081203490819055600c8054919290916113ef908490612d96565b90915550610fca90508282611cd8565b60006001600160e01b031982166380ac58cd60e01b148061143057506001600160e01b03198216635b5e139f60e01b145b8061065c57506301ffc9a760e01b6001600160e01b031983161461065c565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061148482610cff565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166115365760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610769565b600061154183610cff565b9050806001600160a01b0316846001600160a01b0316148061157c5750836001600160a01b0316611571846106f4565b6001600160a01b0316145b806115ac57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166115c782610cff565b6001600160a01b03161461162f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610769565b6001600160a01b0382166116915760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610769565b61169c838383611e26565b6116a760008261144f565b6001600160a01b03831660009081526003602052604081208054600192906116d0908490612e06565b90915550506001600160a01b03821660009081526003602052604081208054600192906116fe908490612d96565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156118135760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610769565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6060816118a45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156118ce57806118b881612e84565b91506118c79050600a83612dd3565b91506118a8565b60008167ffffffffffffffff8111156118f757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611921576020820181803683370190505b509050815b85156119bc57611937600182612e06565b90506000611946600a88612dd3565b61195190600a612de7565b61195b9088612e06565b611966906030612dae565b905060008160f81b90508084848151811061199157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506119b3600a89612dd3565b97505050611926565b50949350505050565b6119d08484846115b4565b6119dc84848484611ede565b6110555760405162461bcd60e51b815260040161076990612cbe565b606081611a1c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a465780611a3081612e84565b9150611a3f9050600a83612dd3565b9150611a20565b60008167ffffffffffffffff811115611a6f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a99576020820181803683370190505b5090505b84156115ac57611aae600183612e06565b9150611abb600a86612e9f565b611ac6906030612d96565b60f81b818381518110611ae957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611b0b600a86612dd3565b9450611a9d565b60606000611b1f83610fce565b60405160200161100c919061280d565b6060815160001415611b4f57505060408051602081019091526000815290565b6000604051806060016040528060408152602001612f0c6040913990506000600384516002611b7e9190612d96565b611b889190612dd3565b611b93906004612de7565b90506000611ba2826020612d96565b67ffffffffffffffff811115611bc857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611bf2576020820181803683370190505b509050818152600183018586518101602084015b81831015611c5e576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101611c06565b600389510660018114611c785760028114611c8957611c95565b613d3d60f01b600119830152611c95565b603d60f81b6000198301525b509398975050505050505050565b600c546000838152600b60205260408120549091600191611cc49085612de7565b611cce9190612dd3565b6111c99190612e06565b6001600160a01b038216611d2e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610769565b6000818152600260205260409020546001600160a01b031615611d935760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610769565b611d9f60008383611e26565b6001600160a01b0382166000908152600360205260408120805460019290611dc8908490612d96565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b038316611e8157611e7c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611ea4565b816001600160a01b0316836001600160a01b031614611ea457611ea48382611feb565b6001600160a01b038216611ebb5761089f81612088565b826001600160a01b0316826001600160a01b03161461089f5761089f8282612161565b60006001600160a01b0384163b15611fe057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611f22903390899088908890600401612c1d565b602060405180830381600087803b158015611f3c57600080fd5b505af1925050508015611f6c575060408051601f3d908101601f19168201909252611f69918101906123de565b60015b611fc6573d808015611f9a576040519150601f19603f3d011682016040523d82523d6000602084013e611f9f565b606091505b508051611fbe5760405162461bcd60e51b815260040161076990612cbe565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506115ac565b506001949350505050565b60006001611ff884610e35565b6120029190612e06565b600083815260076020526040902054909150808214612055576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061209a90600190612e06565b600083815260096020526040812054600880549394509092849081106120d057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106120ff57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061214557634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061216c83610e35565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b80356001600160a01b0381168114610e3057600080fd5b60008083601f8401126121cd578182fd5b50813567ffffffffffffffff8111156121e4578182fd5b6020830191508360208285010111156121fc57600080fd5b9250929050565b600060208284031215612214578081fd5b6111c9826121a5565b6000806040838503121561222f578081fd5b612238836121a5565b9150612246602084016121a5565b90509250929050565b600080600060608486031215612263578081fd5b61226c846121a5565b925061227a602085016121a5565b9150604084013590509250925092565b6000806000806080858703121561229f578081fd5b6122a8856121a5565b93506122b6602086016121a5565b925060408501359150606085013567ffffffffffffffff808211156122d9578283fd5b818701915087601f8301126122ec578283fd5b8135818111156122fe576122fe612edf565b604051601f8201601f19908116603f0116810190838211818310171561232657612326612edf565b816040528281528a602084870101111561233e578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612371578182fd5b61237a836121a5565b91506020830135801515811461238e578182fd5b809150509250929050565b600080604083850312156123ab578182fd5b6123b4836121a5565b946020939093013593505050565b6000602082840312156123d3578081fd5b81356111c981612ef5565b6000602082840312156123ef578081fd5b81516111c981612ef5565b60008060008060008060006080888a031215612414578283fd5b873567ffffffffffffffff8082111561242b578485fd5b6124378b838c016121bc565b909950975060208a013591508082111561244f578485fd5b61245b8b838c016121bc565b909750955060408a0135915080821115612473578485fd5b506124808a828b016121bc565b989b979a50959894979596606090950135949350505050565b6000602082840312156124aa578081fd5b5035919050565b600080604083850312156124c3578182fd5b50508035926020909101359150565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452612513816020860160208601612e1d565b601f01601f19169290920160200192915050565b60008151612539818560208601612e1d565b9290920192915050565b683d913730b6b2911d1160b91b81528651600090612568816009850160208c01612e1d565b71111610113232b9b1b934b83a34b7b7111d1160711b600991840191820152875161259a81601b840160208c01612e1d565b7f222c202265787465726e616c5f75726c223a2268747470733a2f2f7374616b65601b929091019182015273636f6e616d69676f732e636f6d2f746f6b656e2f60601b603b82015286516125f581604f840160208b01612e1d565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a604f92909101918201527f20226465706f736974222c202276616c7565223a202245000000000000000000606f8201526126fc6126ee6126e86126bf6126a561269f612665608688018d612527565b7f227d2c7b2274726169745f74797065223a2022636c61696d61626c65222c202281526703b30b63ab2911d160c51b602082015260280190565b8a612527565b6d3eae96101134b6b0b3b2911d101160911b8152600e0190565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a0190565b86612527565b61227d60f01b815260020190565b9998505050505050505050565b7f74686973206672656e207368617265206861732061206465706f736974206f668152600160fd1b60208201526000835161274b816021850160208801612e1d565b7f207769746820636c61696d61626c652062616c616e6365206f66200000000000602191840191820152835161278881603c840160208801612e1d565b01603c01949350505050565b6b6672656e207368617265202360a01b8152600082516127bb81600c850160208701612e1d565b91909101600c0192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161280081601d850160208701612e1d565b91909101601d0192915050565b7f3c7376672077696474683d2234303022206865696768743d223430302220786d81527f6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667226020820152601f60f91b604082015260008251612875816041850160208701612e1d565b651e17b9bb339f60d11b6041939091019283015250604701919050565b6b1e339034b21e913834b1911f60a11b81527f3c656c6c69707365207374726f6b652d77696474683d2233222072793d223139600c8201527f35222072783d22313935222069643d227376675f32222063793d223230302220602c8201527f63783d2232303022207374726f6b653d2223303030222066696c6c3d22677265604c8201527f79222f3e3c7465787420666f6e742d73697a653d2234302220666f6e742d7765606c8201527f696768743d22626f6c642220783d223132302220793d22313430222066696c6c608c8201527f3d22626c756522207374726f6b653d222330303022207374726f6b652d77696460ac8201527f74683d22312220666f6e742d66616d696c793d2273616e732d7365726966223e60cc820152672232b837b9b4ba1d60c11b60ec820152661e17ba32bc3a1f60c91b60f48201527f3c7465787420666f6e742d73697a653d2233302220666f6e742d77656967687460fb8201527f3d22626f6c642220783d223135302220793d22313735222066696c6c3d22626c61011b8201527f756522207374726f6b653d222330303022207374726f6b652d77696474683d2261013b8201527f312220666f6e742d66616d696c793d2273616e732d7365726966223e0000000061015b82015260006115ac612c0d612aa1612a91612c07612b6c612b4f612ab485856101778c018e612527565b630408ae8d60e31b815260040190565b661e17ba32bc3a1f60c91b815260070190565b7f3c7465787420666f6e742d73697a653d2234302220666f6e742d77656967687481527f3d22626f6c642220783d223131302220793d22323430222066696c6c3d22677260208201527f65656e22207374726f6b653d222330303022207374726f6b652d77696474683d60408201527f22312220666f6e742d66616d696c793d2273616e732d7365726966223e0000006060820152607d0190565b7021b630b4b6b0b136329d1e17ba32bc3a1f60791b815260110190565b7f3c7465787420666f6e742d73697a653d2233302220666f6e742d77656967687481527f3d22626f6c642220783d223135302220793d22323735222066696c6c3d22677260208201527f65656e22207374726f6b653d222330303022207374726f6b652d77696474683d60408201527f22312220666f6e742d66616d696c793d2273616e732d7365726966223e0000006060820152607d0190565b87612527565b631e17b39f60e11b815260040190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612c50908301846124fb565b9695505050505050565b608081526000612c6e60808301898b6124d2565b8281036020840152612c8181888a6124d2565b90508281036040840152612c968186886124d2565b91505082606083015298975050505050505050565b6020815260006111c960208301846124fb565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115612da957612da9612eb3565b500190565b600060ff821660ff84168060ff03821115612dcb57612dcb612eb3565b019392505050565b600082612de257612de2612ec9565b500490565b6000816000190483118215151615612e0157612e01612eb3565b500290565b600082821015612e1857612e18612eb3565b500390565b60005b83811015612e38578181015183820152602001612e20565b838111156110555750506000910152565b600181811c90821680612e5d57607f821691505b60208210811415612e7e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612e9857612e98612eb3565b5060010190565b600082612eae57612eae612ec9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146111fc57600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220b6ffda05c899e347e71290d5c0f66ced4078ee08a9d44366914420968ec4901064736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101e55760003560e01c8063715018a611610101578063a2d6c6da1161009a578063e2664e491161006c578063e2664e4914610591578063e4fc6b6d146105a6578063e985e9c5146105bb578063f2fde38b14610604578063f340fa011461062457005b8063a2d6c6da14610511578063b88d4fde14610531578063c87b56dd14610551578063cfb5a5f81461057157005b8063893d20e8116100d3578063893d20e8146104a05780638da5cb5b146104be57806395d89b41146104dc578063a22cb465146104f157005b8063715018a6146104355780637d8820971461044a5780638620891c1461046057806387f8ab261461047357005b80632f745c591161017e5780634f6ccce7116101505780634f6ccce7146103a05780636352211e146103c05780636620a935146103e0578063678e300a146103f557806370a082311461041557005b80632f745c591461032057806342842e0e14610340578063441a3e70146103605780634b2b4e361461038057005b806318160ddd116101b757806318160ddd1461029d57806323b872dd146102bc5780632a4dbd2b146102dc5780632def66201461030157005b806301ffc9a7146101ee57806306fdde0314610223578063081812fc14610245578063095ea7b31461027d57005b366101ec57005b005b3480156101fa57600080fd5b5061020e6102093660046123c2565b610637565b60405190151581526020015b60405180910390f35b34801561022f57600080fd5b50610238610662565b60405161021a9190612cab565b34801561025157600080fd5b50610265610260366004612499565b6106f4565b6040516001600160a01b03909116815260200161021a565b34801561028957600080fd5b506101ec610298366004612399565b61078e565b3480156102a957600080fd5b506008545b60405190815260200161021a565b3480156102c857600080fd5b506101ec6102d736600461224f565b6108a4565b3480156102e857600080fd5b50600e546102659061010090046001600160a01b031681565b34801561030d57600080fd5b506101ec600e805460ff19166002179055565b34801561032c57600080fd5b506102ae61033b366004612399565b6108d5565b34801561034c57600080fd5b506101ec61035b36600461224f565b61096b565b34801561036c57600080fd5b506101ec61037b3660046124b1565b610986565b34801561038c57600080fd5b506101ec61039b3660046123fa565b610b12565b3480156103ac57600080fd5b506102ae6103bb366004612499565b610c5e565b3480156103cc57600080fd5b506102656103db366004612499565b610cff565b3480156103ec57600080fd5b506101ec610d76565b34801561040157600080fd5b506102ae610410366004612499565b610df1565b34801561042157600080fd5b506102ae610430366004612203565b610e35565b34801561044157600080fd5b506101ec610ebc565b34801561045657600080fd5b506102ae600c5481565b6101ec61046e366004612499565b610ef0565b34801561047f57600080fd5b506102ae61048e366004612499565b600b6020526000908152604090205481565b3480156104ac57600080fd5b506010546001600160a01b0316610265565b3480156104ca57600080fd5b50600a546001600160a01b0316610265565b3480156104e857600080fd5b50610238610fb0565b3480156104fd57600080fd5b506101ec61050c36600461235f565b610fbf565b34801561051d57600080fd5b5061023861052c366004612499565b610fce565b34801561053d57600080fd5b506101ec61054c36600461228a565b611023565b34801561055d57600080fd5b5061023861056c366004612499565b61105b565b34801561057d57600080fd5b506102ae61058c366004612499565b6111bc565b34801561059d57600080fd5b506101ec6111d0565b3480156105b257600080fd5b506101ec6111ff565b3480156105c757600080fd5b5061020e6105d636600461221d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561061057600080fd5b506101ec61061f366004612203565b6112e8565b6101ec610632366004612203565b611380565b60006001600160e01b0319821663780e9d6360e01b148061065c575061065c826113ff565b92915050565b60606000805461067190612e49565b80601f016020809104026020016040519081016040528092919081815260200182805461069d90612e49565b80156106ea5780601f106106bf576101008083540402835291602001916106ea565b820191906000526020600020905b8154815290600101906020018083116106cd57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107725760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061079982610cff565b9050806001600160a01b0316836001600160a01b031614156108075760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610769565b336001600160a01b0382161480610823575061082381336105d6565b6108955760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610769565b61089f838361144f565b505050565b6108ae33826114bd565b6108ca5760405162461bcd60e51b815260040161076990612d45565b61089f8383836115b4565b60006108e083610e35565b82106109425760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610769565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61089f83838360405180602001604052806000815250611023565b6001600e5460ff1660028111156109ad57634e487b7160e01b600052602160045260246000fd5b14156109fb5760405162461bcd60e51b815260206004820152601b60248201527f63616e6e6f74207769746864726177206f6e6365207374616b656400000000006044820152606401610769565b610a0482610cff565b6001600160a01b0316336001600160a01b031614610a545760405162461bcd60e51b815260206004820152600d60248201526c3737ba103a34329037bbb732b960991b6044820152606401610769565b6000828152600b6020526040902054811115610aa95760405162461bcd60e51b81526020600482015260146024820152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606401610769565b6000828152600b602052604081208054839290610ac7908490612e06565b9250508190555080600c6000828254610ae09190612e06565b9091555050604051339082156108fc029083906000818181858888f1935050505015801561089f573d6000803e3d6000fd5b600a546001600160a01b03163314610b3c5760405162461bcd60e51b815260040161076990612d10565b6020471015610b7e5760405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606401610769565b600e805460ff19166001179055600f546040516304512a2360e31b81526801bc16d674ec800000916001600160a01b0316906322895118908390610bd2908c908c908c908c908c908c908c90600401612c5a565b6000604051808303818588803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b5050600e54604080516101009092046001600160a01b031682523360208301527f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a449450019150610c4c9050565b60405180910390a15050505050505050565b6000610c6960085490565b8210610ccc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610769565b60088281548110610ced57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b03168061065c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610769565b6010546001600160a01b0316610d94600a546001600160a01b031690565b6001600160a01b03161415610dda5760405162461bcd60e51b815260206004820152600c60248201526b616c726561647920646f6e6560a01b6044820152606401610769565b601054610def906001600160a01b031661175f565b565b600080600e5460ff166002811115610e1957634e487b7160e01b600052602160045260246000fd5b1415610e2757506000919050565b61065c826111bc565b919050565b60006001600160a01b038216610ea05760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610769565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610ee65760405162461bcd60e51b815260040161076990612d10565b610def600061175f565b6000818152600260205260409020546001600160a01b0316610f405760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152606401610769565b6000600e5460ff166002811115610f6757634e487b7160e01b600052602160045260246000fd5b14610f7157600080fd5b6000818152600b602052604081208054349290610f8f908490612d96565b9250508190555034600c6000828254610fa89190612d96565b909155505050565b60606001805461067190612e49565b610fca3383836117b1565b5050565b6000818152600b602052604081205460609190610fea90611880565b610ffb610ff685610df1565b611880565b60405160200161100c929190612892565b60408051601f198184030181529190529392505050565b61102d33836114bd565b6110495760405162461bcd60e51b815260040161076990612d45565b611055848484846119c5565b50505050565b6000818152600260205260409020546060906001600160a01b03166110ae5760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152606401610769565b60006110b9836119f8565b6040516020016110c99190612794565b60408051601f198184030181529181526000858152600b60205290812054919250906110f490611880565b611100610ff686610df1565b604051602001611111929190612709565b6040516020818303038152906040529050600061113561113086611b12565b611b2f565b90506111938383611145886119f8565b6000898152600b602052604090205461115d90611880565b611169610ff68b610df1565b8660405160200161117f96959493929190612543565b604051602081830303815290604052611b2f565b6040516020016111a391906127c8565b6040516020818303038152906040529350505050919050565b6000476111c98382611ca3565b9392505050565b60405133904780156108fc02916000818181858888f193505050501580156111fc573d6000803e3d6000fd5b50565b6001600e5460ff16600281111561122657634e487b7160e01b600052602160045260246000fd5b146112735760405162461bcd60e51b815260206004820152601c60248201527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606401610769565b4760015b6008548111610fca57600061128b82610cff565b905060006112998385611ca3565b6040519091506001600160a01b0383169082156108fc029083906000818181858888f193505050501580156112d2573d6000803e3d6000fd5b50505080806112e090612e84565b915050611277565b600a546001600160a01b031633146113125760405162461bcd60e51b815260040161076990612d10565b6001600160a01b0381166113775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610769565b6111fc8161175f565b6000600e5460ff1660028111156113a757634e487b7160e01b600052602160045260246000fd5b146113b157600080fd5b600d80549060006113c183612e84565b9091555050600d546000818152600b602052604081203490819055600c8054919290916113ef908490612d96565b90915550610fca90508282611cd8565b60006001600160e01b031982166380ac58cd60e01b148061143057506001600160e01b03198216635b5e139f60e01b145b8061065c57506301ffc9a760e01b6001600160e01b031983161461065c565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061148482610cff565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166115365760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610769565b600061154183610cff565b9050806001600160a01b0316846001600160a01b0316148061157c5750836001600160a01b0316611571846106f4565b6001600160a01b0316145b806115ac57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166115c782610cff565b6001600160a01b03161461162f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610769565b6001600160a01b0382166116915760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610769565b61169c838383611e26565b6116a760008261144f565b6001600160a01b03831660009081526003602052604081208054600192906116d0908490612e06565b90915550506001600160a01b03821660009081526003602052604081208054600192906116fe908490612d96565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156118135760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610769565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6060816118a45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156118ce57806118b881612e84565b91506118c79050600a83612dd3565b91506118a8565b60008167ffffffffffffffff8111156118f757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611921576020820181803683370190505b509050815b85156119bc57611937600182612e06565b90506000611946600a88612dd3565b61195190600a612de7565b61195b9088612e06565b611966906030612dae565b905060008160f81b90508084848151811061199157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506119b3600a89612dd3565b97505050611926565b50949350505050565b6119d08484846115b4565b6119dc84848484611ede565b6110555760405162461bcd60e51b815260040161076990612cbe565b606081611a1c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a465780611a3081612e84565b9150611a3f9050600a83612dd3565b9150611a20565b60008167ffffffffffffffff811115611a6f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a99576020820181803683370190505b5090505b84156115ac57611aae600183612e06565b9150611abb600a86612e9f565b611ac6906030612d96565b60f81b818381518110611ae957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611b0b600a86612dd3565b9450611a9d565b60606000611b1f83610fce565b60405160200161100c919061280d565b6060815160001415611b4f57505060408051602081019091526000815290565b6000604051806060016040528060408152602001612f0c6040913990506000600384516002611b7e9190612d96565b611b889190612dd3565b611b93906004612de7565b90506000611ba2826020612d96565b67ffffffffffffffff811115611bc857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611bf2576020820181803683370190505b509050818152600183018586518101602084015b81831015611c5e576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101611c06565b600389510660018114611c785760028114611c8957611c95565b613d3d60f01b600119830152611c95565b603d60f81b6000198301525b509398975050505050505050565b600c546000838152600b60205260408120549091600191611cc49085612de7565b611cce9190612dd3565b6111c99190612e06565b6001600160a01b038216611d2e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610769565b6000818152600260205260409020546001600160a01b031615611d935760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610769565b611d9f60008383611e26565b6001600160a01b0382166000908152600360205260408120805460019290611dc8908490612d96565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b038316611e8157611e7c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611ea4565b816001600160a01b0316836001600160a01b031614611ea457611ea48382611feb565b6001600160a01b038216611ebb5761089f81612088565b826001600160a01b0316826001600160a01b03161461089f5761089f8282612161565b60006001600160a01b0384163b15611fe057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611f22903390899088908890600401612c1d565b602060405180830381600087803b158015611f3c57600080fd5b505af1925050508015611f6c575060408051601f3d908101601f19168201909252611f69918101906123de565b60015b611fc6573d808015611f9a576040519150601f19603f3d011682016040523d82523d6000602084013e611f9f565b606091505b508051611fbe5760405162461bcd60e51b815260040161076990612cbe565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506115ac565b506001949350505050565b60006001611ff884610e35565b6120029190612e06565b600083815260076020526040902054909150808214612055576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061209a90600190612e06565b600083815260096020526040812054600880549394509092849081106120d057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106120ff57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061214557634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061216c83610e35565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b80356001600160a01b0381168114610e3057600080fd5b60008083601f8401126121cd578182fd5b50813567ffffffffffffffff8111156121e4578182fd5b6020830191508360208285010111156121fc57600080fd5b9250929050565b600060208284031215612214578081fd5b6111c9826121a5565b6000806040838503121561222f578081fd5b612238836121a5565b9150612246602084016121a5565b90509250929050565b600080600060608486031215612263578081fd5b61226c846121a5565b925061227a602085016121a5565b9150604084013590509250925092565b6000806000806080858703121561229f578081fd5b6122a8856121a5565b93506122b6602086016121a5565b925060408501359150606085013567ffffffffffffffff808211156122d9578283fd5b818701915087601f8301126122ec578283fd5b8135818111156122fe576122fe612edf565b604051601f8201601f19908116603f0116810190838211818310171561232657612326612edf565b816040528281528a602084870101111561233e578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612371578182fd5b61237a836121a5565b91506020830135801515811461238e578182fd5b809150509250929050565b600080604083850312156123ab578182fd5b6123b4836121a5565b946020939093013593505050565b6000602082840312156123d3578081fd5b81356111c981612ef5565b6000602082840312156123ef578081fd5b81516111c981612ef5565b60008060008060008060006080888a031215612414578283fd5b873567ffffffffffffffff8082111561242b578485fd5b6124378b838c016121bc565b909950975060208a013591508082111561244f578485fd5b61245b8b838c016121bc565b909750955060408a0135915080821115612473578485fd5b506124808a828b016121bc565b989b979a50959894979596606090950135949350505050565b6000602082840312156124aa578081fd5b5035919050565b600080604083850312156124c3578182fd5b50508035926020909101359150565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452612513816020860160208601612e1d565b601f01601f19169290920160200192915050565b60008151612539818560208601612e1d565b9290920192915050565b683d913730b6b2911d1160b91b81528651600090612568816009850160208c01612e1d565b71111610113232b9b1b934b83a34b7b7111d1160711b600991840191820152875161259a81601b840160208c01612e1d565b7f222c202265787465726e616c5f75726c223a2268747470733a2f2f7374616b65601b929091019182015273636f6e616d69676f732e636f6d2f746f6b656e2f60601b603b82015286516125f581604f840160208b01612e1d565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a604f92909101918201527f20226465706f736974222c202276616c7565223a202245000000000000000000606f8201526126fc6126ee6126e86126bf6126a561269f612665608688018d612527565b7f227d2c7b2274726169745f74797065223a2022636c61696d61626c65222c202281526703b30b63ab2911d160c51b602082015260280190565b8a612527565b6d3eae96101134b6b0b3b2911d101160911b8152600e0190565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a0190565b86612527565b61227d60f01b815260020190565b9998505050505050505050565b7f74686973206672656e207368617265206861732061206465706f736974206f668152600160fd1b60208201526000835161274b816021850160208801612e1d565b7f207769746820636c61696d61626c652062616c616e6365206f66200000000000602191840191820152835161278881603c840160208801612e1d565b01603c01949350505050565b6b6672656e207368617265202360a01b8152600082516127bb81600c850160208701612e1d565b91909101600c0192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161280081601d850160208701612e1d565b91909101601d0192915050565b7f3c7376672077696474683d2234303022206865696768743d223430302220786d81527f6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667226020820152601f60f91b604082015260008251612875816041850160208701612e1d565b651e17b9bb339f60d11b6041939091019283015250604701919050565b6b1e339034b21e913834b1911f60a11b81527f3c656c6c69707365207374726f6b652d77696474683d2233222072793d223139600c8201527f35222072783d22313935222069643d227376675f32222063793d223230302220602c8201527f63783d2232303022207374726f6b653d2223303030222066696c6c3d22677265604c8201527f79222f3e3c7465787420666f6e742d73697a653d2234302220666f6e742d7765606c8201527f696768743d22626f6c642220783d223132302220793d22313430222066696c6c608c8201527f3d22626c756522207374726f6b653d222330303022207374726f6b652d77696460ac8201527f74683d22312220666f6e742d66616d696c793d2273616e732d7365726966223e60cc820152672232b837b9b4ba1d60c11b60ec820152661e17ba32bc3a1f60c91b60f48201527f3c7465787420666f6e742d73697a653d2233302220666f6e742d77656967687460fb8201527f3d22626f6c642220783d223135302220793d22313735222066696c6c3d22626c61011b8201527f756522207374726f6b653d222330303022207374726f6b652d77696474683d2261013b8201527f312220666f6e742d66616d696c793d2273616e732d7365726966223e0000000061015b82015260006115ac612c0d612aa1612a91612c07612b6c612b4f612ab485856101778c018e612527565b630408ae8d60e31b815260040190565b661e17ba32bc3a1f60c91b815260070190565b7f3c7465787420666f6e742d73697a653d2234302220666f6e742d77656967687481527f3d22626f6c642220783d223131302220793d22323430222066696c6c3d22677260208201527f65656e22207374726f6b653d222330303022207374726f6b652d77696474683d60408201527f22312220666f6e742d66616d696c793d2273616e732d7365726966223e0000006060820152607d0190565b7021b630b4b6b0b136329d1e17ba32bc3a1f60791b815260110190565b7f3c7465787420666f6e742d73697a653d2233302220666f6e742d77656967687481527f3d22626f6c642220783d223135302220793d22323735222066696c6c3d22677260208201527f65656e22207374726f6b653d222330303022207374726f6b652d77696474683d60408201527f22312220666f6e742d66616d696c793d2273616e732d7365726966223e0000006060820152607d0190565b87612527565b631e17b39f60e11b815260040190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612c50908301846124fb565b9695505050505050565b608081526000612c6e60808301898b6124d2565b8281036020840152612c8181888a6124d2565b90508281036040840152612c968186886124d2565b91505082606083015298975050505050505050565b6020815260006111c960208301846124fb565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115612da957612da9612eb3565b500190565b600060ff821660ff84168060ff03821115612dcb57612dcb612eb3565b019392505050565b600082612de257612de2612ec9565b500490565b6000816000190483118215151615612e0157612e01612eb3565b500290565b600082821015612e1857612e18612eb3565b500390565b60005b83811015612e38578181015183820152602001612e20565b838111156110555750506000910152565b600181811c90821680612e5d57607f821691505b60208210811415612e7e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612e9857612e98612eb3565b5060010190565b600082612eae57612eae612ec9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146111fc57600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220b6ffda05c899e347e71290d5c0f66ced4078ee08a9d44366914420968ec4901064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1084,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1088,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1091,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1095,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2173,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "depositAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2175,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2177,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_tokenId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2184,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "currentState",
        "offset": 0,
        "slot": "14",
        "type": "t_enum(State)2181"
      },
      {
        "astId": 2186,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "depositContractAddress",
        "offset": 1,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 2189,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "depositContract",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IDepositContract)2156"
      },
      {
        "astId": 2191,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "rightfulOwner",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDepositContract)2156": {
        "encoding": "inplace",
        "label": "contract IDepositContract",
        "numberOfBytes": "20"
      },
      "t_enum(State)2181": {
        "encoding": "inplace",
        "label": "enum StakingPool.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}