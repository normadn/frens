// import { ethers } from 'ethers';
// import { SSVKeys, EthereumKeyStore } from 'ssv-keys';
import {
  usePrepareContractWrite,
  useContractWrite,
  useNetwork
} from "wagmi";
import SSVRegistry from "../../utils/SSVRegistry.json";

// const split = async (
//   keystore,   // string 
//   keystorePassword,
//   operators,
//   operatorIds,
//   ssvAmount,
// ) => {
//   const ssvKeys = new SSVKeys();
//   const keyStore = new EthereumKeyStore(keystore);
//   const privateKey = await keyStore.getPrivateKey(keystorePassword);

//   // Step 2: Build shares from operator IDs and public keys
//   const threshold = await ssvKeys.createThreshold(privateKey, operatorIds);
//   const shares = await ssvKeys.encryptShares(operators, threshold.shares);

//   // Step 3: Build final web3 transaction payload
//   const payload = await ssvKeys.buildPayload(
//     threshold.validatorPublicKey,
//     operatorIds,
//     shares,
//     ssvAmount,
//   );
//   console.log(payload);
//   return payload;
// }

export function useSSVRegisterValidator(
  {
    keystore,
    keystorePassword,
    operators,
    operatorIds,
    ssvAmount,
  }: {
    keystore: string,
    keystorePassword: string,
    operators: string[],
    operatorIds: string[],
    ssvAmount: number
  }) {

  // const payload = await split(keystore,keystorePassword,operators,operatorIds,ssvAmount);

  const payload = [
    '0xabfefd0002fe70e57c8eb3e9ca384176456c5a73265843cf02a7f21a85e604fa473f1448138bc660fc5a5a49fbd54c8e',
    '123,456,789,777',
    [
      '0x859a03dcb176aff28aeb10bed42db93aa2705e1e69c60aa762f7b983c8f7a49d7e1fad31aee9596633a278b61971fdf9',
      '0xac9d25ff5a4167b23d60d518d19eace34fb08c715b5b1022d082a79d18624c4b82be13f2d18b02b3cedae87f52f058c5',
      '0xaf0b7fb534dc37578e887d7ba3dc5108bf05fa1a2c35a75873de97d3e67d9879b5dc27a02de9d75aa2964d9750b2cd65',
      '0x9969d2d1a79e69d88fd1d6f34a5fc6b78993bba02c75e5bea687c40c119f3079291f4b582f552d12ed0f302a4eb8b451'
    ],
    [
      '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000015861386a594b6d6870434a536248436a336d6b2f6e45416159767a624a4c4e3657494d694a636f556531444948386667534454645942727a57677a50334e7348394758556331322f5a624778664878456c7732363744577936356e472b767273644a7261314165534b624750337238784e35512b686f67794b79686f6e6d372f6f52564470585177644a617a6566577a2f4d2f696e62306f5368616e564868443330786b3748376d6b784f664d563452375861756f4179333764764175674d7563393935544d436361692b733138386436666446787a434a4b5973584d6552455854482f4d6e736355485a46582f59546566766937706665517373755371484b424f3267494e65635a754442522b424e43396d797357435861546a3365387a684c4a4f746e58773636424e554634436a7854476547712f6b356256564a344b64377938316e2f69344d6d685944455663764666643675413d3d0000000000000000',
      '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001584f71596d5a30726f6a464f2f674863483935677a6d68656238385351633573366f5a723831486d737239724c5150762b4455375a6565446c4255696f6d2f74445235697777696377796674776e6f317566485a423952695a3130534e72566c786378626777624c534577566b4e67322b4d454a6e4e58724f636455565a634b4e6c64444c385776452f4f356773752b71765048583936615475614f53744f766f584a6576534a6e3834686c7a4c496c555578636564486b7a6d5157313536394a79766a55504336343873597a3438773847436b724c6b554631575369576c5169634b5a594874546f4269584d58755339442b446f63704a4c71513230654c557a5a474f33356c312b306f367249324b2b312f486a4f354f646473363751636c672b712f53746239566b672f48416b72743931382b523531646b7a375566504b5a757663422f744173637772746d4d54444255375130673d3d0000000000000000',
      '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000158423559685a47774143766563452b4d4f4975645376744a2f736662655745712b377371786937327242366f696371327874435065797a5a6a495677475457576f30315234674b43516834667a6d68433530444979424241774559724b6b43766643544a4d384c62466b4f346d4f4a43323547664a56444855676b4b33636e5a77774a37377a6f7a5042667477626c5944393661704d6f79536c54664d5735653058434241374770515631796f566c41754242354962305a434b41664353576c344e4748746566524b7a4f597477693062623034692f57594151743749786b44726143484b357953646632434d62706e304158636a6132344241486c4a525557473433705149473046786574434f75484130384f484f506c735673564d68657463782f4d58574561316c4f544c4a544731786863544f504b7978444246595a466358354257776a4e7151322f35705830764f305a6952513d3d0000000000000000',
      '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000158497466507958682f53664e3442735a4f48554855413658724c493838454e6e39597167534a5773727362674e4959776f657277675a76705845446f3331746e53764b7744304237746441684f477343784c6c77702f33306c756e7579576e36367a4955414c5370304130617535654f6f4d556d50446831492b6e424e376c4b576a2b6554357851654a5a462f34724b7833646d2b6f6e5563315a5776426e426a4c6567643437747471672b4b7666504749477061522f42387830492b52744f2b4e7567746d6e6c7853615832336968653851305858706a574376676e3774496c6f50754f3636596c6b64544a652b547871344a6c7135326833702b6e5358767a554c364e636a6b58587a633748782b4c4f535649326d77664d3058593544512b6670797a7561756f33514d6e6767377754516d6d384666442b655731524c624545645667543857486157494e76327a6847614b6d6f773d3d0000000000000000'
    ],
    20
  ];

  const { chain } = useNetwork();
  const contractAddr =
    chain?.name === "Goerli"
      ? "0x49D395eFcE6233e116C69333F249e6cF128D5992"
      : "0x00000000000000000000000000000000deadb33f"; // TODO :)

  const { config } = usePrepareContractWrite({
    addressOrName: contractAddr,
    contractInterface: SSVRegistry.abi,
    functionName: 'registerValidator',
    args: payload,
  })
  const { data, isLoading, isSuccess, write } = useContractWrite(config)

  return { data, isLoading, isSuccess, write };
}
